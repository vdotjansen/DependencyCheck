#**
This file is part of Dependency-Check.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright (c) 2018 Jeremy Long. All Rights Reserved.

@author Jeremy Long <jeremy.long@owasp.org>
@version 2.0

*#<?xml version="1.0"?>
<analysis xmlns="https://jeremylong.github.io/DependencyCheck/dependency-check.2.3.xsd">
    <scanInfo>
        <engineVersion>$version</engineVersion>
#foreach($prop in $properties.getMetaData().entrySet())
        <dataSource>
            <name>$enc.xml($prop.key)</name>
            <timestamp>$enc.xml($prop.value)</timestamp>
        </dataSource>
#end
#if($exceptions)
    #macro( writeXmlException $type $ex $depth)
        <$type><message>$enc.xml($ex.toString())</message>
        #if($ex.getStackTrace())
            <stackTrace>
            #foreach($t in $ex.getStackTrace())
                <trace>$enc.xml($t.toString())</trace>
            #end
            </stackTrace>
        #end
        #if($ex.getCause() && $depth<20)
            #set($cause="cause")
            #set($currentDepth=$depth+1)
            #writeXmlException($cause $ex.getCause() $currentDepth)
        #end
        </$type>
    #end
        <analysisExceptions>
            #foreach($ex in $exceptions)
                #set($type="exception")
                #set($d=0)
                #writeXmlException($type $ex $d)
            #end
        </analysisExceptions>
#end
    </scanInfo>
    <projectInfo>
        <name>$enc.xml($applicationName)</name>
#if ($groupID)
        <groupID>$enc.xml($groupID)</groupID>
#end
#if ($artifactID)        
        <artifactID>$enc.xml($artifactID)</artifactID>
#end
#if ($applicationVersion)
        <version>$enc.xml($applicationVersion)</version>
#end
        <reportDate>$scanDateXML</reportDate>
        <credits>This report contains data retrieved from the National Vulnerability Database: https://nvd.nist.gov, NPM Public Advisories: https://www.npmjs.com/advisories, and the RetireJS community.</credits>
    </projectInfo>
    <dependencies>
#foreach($dependency in $dependencies)
        <dependency isVirtual="#if($dependency.isVirtual())true#{else}false#end">
            <fileName>$enc.xml($dependency.DisplayFileName)</fileName>
            <filePath>$enc.xml($dependency.FilePath)</filePath>
            <md5>#if(!$dependency.isVirtual())$enc.xml($dependency.Md5sum)#end</md5>
            <sha1>#if(!$dependency.isVirtual())$enc.xml($dependency.Sha1sum)#end</sha1>
            <sha256>#if(!$dependency.isVirtual())$enc.xml($dependency.Sha256sum)#end</sha256>
#if ($dependency.description)
            <description>$enc.xml($dependency.description)</description>
#end
#if ($dependency.license)
            <license>$enc.xml($dependency.license)</license>
#end
#if ($dependency.projectReferences.size()>0)
            <projectReferences>
#foreach($ref in $dependency.projectReferences)
                <projectReference>$enc.xml($ref)</projectReference>
#end
            </projectReferences>
#end
#if ($dependency.getRelatedDependencies().size()>0)
            <relatedDependencies>
#foreach($related in $dependency.getRelatedDependencies())
                <relatedDependency#if($related.isVirtual()) isVirtual="true"#end>
                    <filePath>$enc.xml($related.FilePath)</filePath>
                    <sha256>#if(!$dependency.isVirtual())$enc.xml($dependency.Sha256sum)#end</sha256>
                    <sha1>#if(!$related.isVirtual())$enc.xml($related.Sha1sum)#end</sha1>
                    <md5>#if(!$related.isVirtual())$enc.xml($related.Md5sum)#end</md5>
#if($related.getSoftwareIdentifiers().size()>0)
                    <identifiers>
#foreach($id in $related.getSoftwareIdentifiers())
                        <package>
                            <id>$enc.xml($id.value)</id>
#if( $id.url )
                            <url>$enc.xml($id.url)</url>
#end
#if( $id.description )
                            <description>$enc.xml($id.description)</description>
#end
#if ($id.notes)
                            <notes>$enc.xml($id.notes)</notes>
#end
                        </package>
#end
                    </identifiers>
                    #end
                </relatedDependency>
#end
            </relatedDependencies>
#end
            <evidenceCollected>
#foreach($evidence in $dependency.getEvidence($VENDOR))
                <evidence type="vendor" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
#foreach($evidence in $dependency.getEvidence($PRODUCT))
                <evidence type="product" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
#foreach($evidence in $dependency.getEvidence($VERSION))
                <evidence type="version" confidence="$enc.xml($evidence.getConfidence().toString())">
                    <source>$enc.xml($evidence.getSource())</source>
                    <name>$enc.xml($evidence.getName())</name>
                    <value>$enc.xml($evidence.getValue().trim())</value>
                </evidence>
#end
            </evidenceCollected>
#if($dependency.getSoftwareIdentifiers().size()>0 || $dependency.getVulnerableSoftwareIdentifiers().size()>0 || $dependency.getSuppressedIdentifiers().size()>0)
            <identifiers>
#foreach($id in $dependency.getSoftwareIdentifiers())
                <package #if($id.confidence)confidence="$id.confidence"#end>
                    <id>$enc.xml($id.value)</id>
#if( $id.url )
                    <url>$enc.xml($id.url)</url>
#end
#if( $id.description )
                    <description>$enc.xml($id.description)</description>
#end
#if ($id.notes)
                    <notes>$enc.xml($id.notes)</notes>
#end
                </package>
#end
#foreach($id in $dependency.getVulnerableSoftwareIdentifiers())
                <vulnerabilityIds #if($id.confidence)confidence="$id.confidence"#end>
                    <id>$enc.xml($id.value)</id>
#if( $id.url )
                    <url>$enc.xml($id.url)</url>
#end
#if($id.description)<description>$enc.xml($id.description)</description>
#end
#if ($id.notes)     <notes>$enc.xml($id.notes)</notes>
#end
                </vulnerabilityIds>
            #end
#foreach($id in $dependency.getSuppressedIdentifiers())
                <suppressedIdentifier #if($id.confidence)confidence="$id.confidence"#end>
                    <id>$enc.xml($id.value)</id>
#if( $id.url )
                    <url>$enc.xml($id.url)</url>
#end
#if( $id.description )
                    <description>$enc.xml($id.description)</description>
#end
#if ($id.notes)
                    <notes>$enc.xml($id.notes)</notes>
#end
                </suppressedIdentifier>
#end
            </identifiers>
#end
#if($dependency.getVulnerabilities().size()>0 || $dependency.getSuppressedVulnerabilities().size()>0)
            <vulnerabilities>
#foreach($vuln in $dependency.getVulnerabilities(true))
                <vulnerability source="$enc.xml($vuln.getSource().name())">
                    <name>$enc.xml($vuln.name)</name>
#if($vuln.unscoredSeverity)
                    <severity unscored="true">#if($vuln.unscoredSeverity.equals("0.0"))Unknown#else$enc.xml($vuln.unscoredSeverity)#end</severity>
#elseif($vuln.cvssV3 && $vuln.cvssV3.baseSeverity)
                    <severity>$enc.xml($vuln.cvssV3.baseSeverity)</severity>
#elseif($vuln.cvssV2 && $vuln.cvssV2.severity)
                    <severity>$enc.xml($vuln.cvssV2.severity)</severity>
#end
#if($vuln.cvssV2)
                    <cvssV2>
                        <score>$vuln.cvssV2.score</score>
                        <accessVector>#if($vuln.cvssV2.accessVector)$enc.xml($vuln.cvssV2.accessVector)#end</accessVector>
                        <accessComplexity>#if($vuln.cvssV2.accessComplexity)$enc.xml($vuln.cvssV2.accessComplexity)#end</accessComplexity>
                        <authenticationr>#if($vuln.cvssV2.authentication)$enc.xml($vuln.cvssV2.authentication)#end</authenticationr>
                        <confidentialImpact>#if($vuln.cvssV2.confidentialityImpact)$enc.xml($vuln.cvssV2.confidentialityImpact)#end</confidentialImpact>
                        <integrityImpact>#if($vuln.cvssV2.integrityImpact)$enc.xml($vuln.cvssV2.integrityImpact)#end</integrityImpact>
                        <availabilityImpact>#if($vuln.cvssV2.availabilityImpact)$enc.xml($vuln.cvssV2.availabilityImpact)#end</availabilityImpact>
                        <severity>#if($vuln.cvssV2.severity)$enc.xml($vuln.cvssV2.severity)#end</severity>
                    </cvssV2>
#end
#if($vuln.cvssV3)
                    <cvssV3>
                        <baseScore>$vuln.cvssV3.baseScore</baseScore>
                        <attackVector>#if($vuln.cvssV3.attackVector)$enc.xml($vuln.cvssV3.attackVector)#end</attackVector>
                        <attackComplexity>#if($vuln.cvssV3.attackComplexity)$enc.xml($vuln.cvssV3.attackComplexity)#end</attackComplexity>
                        <privilegesRequired>#if($vuln.cvssV3.privilegesRequired)$enc.xml($vuln.cvssV3.privilegesRequired)#end</privilegesRequired>
                        <userInteraction>#if($vuln.cvssV3.userInteraction)$enc.xml($vuln.cvssV3.userInteraction)#end</userInteraction>
                        <scope>#if($vuln.cvssV3.scope)$enc.xml($vuln.cvssV3.scope)#end</scope>
                        <confidentialityImpact>#if($vuln.cvssV3.confidentialityImpact)$enc.xml($vuln.cvssV3.confidentialityImpact)#end</confidentialityImpact>
                        <integrityImpact>#if($vuln.cvssV3.integrityImpact)$enc.xml($vuln.cvssV3.integrityImpact)#end</integrityImpact>
                        <availabilityImpact>#if($vuln.cvssV3.availabilityImpact)$enc.xml($vuln.cvssV3.availabilityImpact)#end</availabilityImpact>
                        <baseSeverity>#if($vuln.cvssV3.baseSeverity)$enc.xml($vuln.cvssV3.baseSeverity)#end</baseSeverity>
                    </cvssV3>
#end
#if (!$vuln.cwes.isEmpty())
                    <cwes>
#foreach($cweEntry in $vuln.cwes.entries)
                    #if($cweEntry)<cwe>$enc.xml($cweEntry)</cwe>#end
#end
                    </cwes>
#end
                    <description>#if ($vuln.description)$enc.xml($vuln.description)#end</description>
#if ($vuln.notes)
                    <notes>$enc.xml($vuln.notes)</notes>
#end
                    <references>
#foreach($ref in $vuln.getReferences())
                        <reference>
                            <source>$enc.xml($ref.source)</source>
                            #if($ref.url)<url>$enc.xml($ref.url)</url>#end
                            <name>$enc.xml($ref.name)</name>
                        </reference>
#end
                    </references>
                    <vulnerableSoftware>
#foreach($vs in $vuln.getVulnerableSoftware())
                        <software#if($vs == $vuln.matchedVulnerableSoftware) vulnerabilityIdMatched="true"#end
                            #if($vs.versionStartIncluding) versionStartIncluding="$enc.xml($vs.versionStartIncluding)"#end
                            #if($vs.versionStartExcluding) versionStartExcluding="$enc.xml($vs.versionStartExcluding)"#end
                            #if($vs.versionEndIncluding) versionEndIncluding="$enc.xml($vs.versionEndIncluding)"#end
                            #if($vs.versionEndExcluding) versionEndExcluding="$enc.xml($vs.versionEndExcluding)"#end
                            #if(!$vs.vulnerable) vulnerable="$vs.vulnerable"#end
                        >$enc.xml($vs.toCpe23FS())</software>
#end
                    </vulnerableSoftware>
                </vulnerability>
#end
#foreach($vuln in $dependency.getSuppressedVulnerabilities(true))
                <suppressedVulnerability source="$enc.xml($vuln.getSource().name())">
                    <name>$enc.xml($vuln.name)</name>
#if($vuln.cvssV2)
                    <cvssV2>
                        <score>$vuln.cvssV2.score</score>
                        <accessVector>#if($vuln.cvssV2.accessVector)$enc.xml($vuln.cvssV2.accessVector)#end</accessVector>
                        <accessComplexity>#if($vuln.cvssV2.accessComplexity)$enc.xml($vuln.cvssV2.accessComplexity)#end</accessComplexity>
                        <authenticationr>#if($vuln.cvssV2.authentication)$enc.xml($vuln.cvssV2.authentication)#end</authenticationr>
                        <confidentialImpact>#if($vuln.cvssV2.confidentialityImpact)$enc.xml($vuln.cvssV2.confidentialityImpact)#end</confidentialImpact>
                        <integrityImpact>#if($vuln.cvssV2.integrityImpact)$enc.xml($vuln.cvssV2.integrityImpact)#end</integrityImpact>
                        <availabilityImpact>#if($vuln.cvssV2.availabilityImpact)$enc.xml($vuln.cvssV2.availabilityImpact)#end</availabilityImpact>
                        <severity>#if($vuln.cvssV2.severity)$enc.xml($vuln.cvssV2.severity)#end</severity>
                    </cvssV2>
#end
#if($vuln.cvssV3)
                    <cvssV3>
                        <baseScore>$vuln.cvssV3.baseScore</baseScore>
                        <attackVector>#if($vuln.cvssV3.attackVector)$enc.xml($vuln.cvssV3.attackVector)#end</attackVector>
                        <attackComplexity>#if($vuln.cvssV3.attackComplexity)$enc.xml($vuln.cvssV3.attackComplexity)#end</attackComplexity>
                        <privilegesRequired>#if($vuln.cvssV3.privilegesRequired)$enc.xml($vuln.cvssV3.privilegesRequired)#end</privilegesRequired>
                        <userInteraction>#if($vuln.cvssV3.userInteraction)$enc.xml($vuln.cvssV3.userInteraction)#end</userInteraction>
                        <scope>#if($vuln.cvssV3.scope)$enc.xml($vuln.cvssV3.scope)#end</scope>
                        <confidentialityImpact>#if($vuln.cvssV3.confidentialityImpact)$enc.xml($vuln.cvssV3.confidentialityImpact)#end</confidentialityImpact>
                        <integrityImpact>#if($vuln.cvssV3.integrityImpact)$enc.xml($vuln.cvssV3.integrityImpact)#end</integrityImpact>
                        <availabilityImpact>#if($vuln.cvssV3.availabilityImpact)$enc.xml($vuln.cvssV3.availabilityImpact)#end</availabilityImpact>
                        <baseSeverity>#if($vuln.cvssV3.baseSeverity)$enc.xml($vuln.cvssV3.baseSeverity)#end</baseSeverity>
                    </cvssV3>
#end
#if (!$vuln.cwes.isEmpty())
                    <cwes>
#foreach($cweEntry in $vuln.cwes.entries)
                    #if($cweEntry)<cwe>$enc.xml($cweEntry)</cwe>#end
#end
                    </cwes>
#end
                    <description>$enc.xml($vuln.description)</description>
#if ($vuln.notes)
                    <notes>$enc.xml($vuln.notes)</notes>
#end
                    <references>
#foreach($ref in $vuln.getReferences())
                        <reference>
                            <source>$enc.xml($ref.source)</source>
                            <url>$enc.xml($ref.url)</url>
                            <name>$enc.xml($ref.name)</name>
                        </reference>
#end
                    </references>
                    <vulnerableSoftware>
#foreach($vs in $vuln.getVulnerableSoftware())
                        <software#if($vs == $vuln.matchedVulnerableSoftware) matched="true"#end
                            #if($vs.versionStartIncluding) versionStartIncluding="$enc.xml($vs.versionStartIncluding)"#end
                            #if($vs.versionStartExcluding) versionStartExcluding="$enc.xml($vs.versionStartExcluding)"#end
                            #if($vs.versionEndIncluding) versionEndIncluding="$enc.xml($vs.versionEndIncluding)"#end
                            #if($vs.versionEndExcluding) versionEndExcluding="$enc.xml($vs.versionEndExcluding)"#end
                            #if(!$vs.vulnerable) vulnerable="$vs.vulnerable"#end
                        >$enc.xml($vs.toCpe23FS())</software>                            
#end
                    </vulnerableSoftware>
                </suppressedVulnerability>
#end
            </vulnerabilities>
#end
        </dependency>
#end
    </dependencies>
</analysis>
